



"""
Script: rebalancer.py

In this script, we implement the rebalancer object. It is the core part the backtesintg platform. It is responsible to
adjust the portfolio. With constant change in the stock prices, the weights of stocks in the portfolio also keep
changing all the time. Therefore we need to rebalance the portfolio from time to time. The rebalance rules will be
implemented in rebalancer object.

"""



from abc import ABCMeta, abstractmethod, abstractproperty
import numpy as np
import backtesting.setting as _bsetting


# Define the base class of Rebalancer object.

def Rebalancer(object):
    __metaclass__ = ABCMeta

    transaction_cost_model = None           # Todo: to be implemented
    market_impact_model    = None           # Todo: to be implemented


    @abstractmethod
    def rebalance_portfolio(self, curr_t, stock_price, curr_portfolio, target_weights):
        """
        This function will rebalance the portfolio and return the new weights. The new weights depends on the portfolio
        type and also the model we use when we rebalance the portfolio. The model of interests includes transaction
        models, market impact models, etc.

        While calculating the new weights, this function will also update the trading cost generated by the transaction
        in rebalancing process.

        Args:
            curr_t:               int. It is the index of the array, which indicates the "time" of current period.
                                  We impose the curr_t >= 1 because there is nothing we can do at the starting point (period = 0)
            stock_price:          np.array. This is a 2-d array. It represents the stock prices. We need this information
                                  to update the weights array and calculate the trading cost.
            curr_weights:         np.array. This is a one-dimension array representing the components of hte current portfolio
            target_weights:       np.array. This is a one-dimension array representing the target weights of each
                                  stock in the portfolio at the current period. The weights is described by the
                                  strategy matrix.

        Return:
            This function returns a 1-d np.array representing the position of the new portfolio. Note that
            the new weights may be different from the target weights depending on the model we use keeping in mind that
            not all the target weights are reachable.

        """
        pass

    @abstractmethod
    def get_trading_cost(self):
        """
        This function will return the trading cost caused by the rebalance process. It will return a pd.DataFrame.
        """
        pass



# define custormized version of the rebalancer.